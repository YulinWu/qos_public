# -*- coding: utf-8 -*-
# github/zhaouv

"""
process content of `QOSServerApi.java`
1. remove all comment
2. match pattern `    public void (\w+)(\([^\)]+\))`
3. generate python api


runRamseyEnvelop has 2 override with same number of arguments  
others can be distinguished by number of arguments
"""


import os
import re
import json
import pprint


class g:
    # verbose=False
    verbose = True

    print = lambda *a, **k: [
        print('\n===v\n', *a, '\n===^\n', **k) for _ in [1] if g.verbose]
    pprint = lambda *a, **k: [
        pprint.pprint('vvvvvvv', **k) for _ in [1] if g.verbose]+[
        pprint.pprint([*a], **k) for _ in [1] if g.verbose]+[
        pprint.pprint('^^^^^^^', **k) for _ in [1] if g.verbose]

    thisPath = os.path.abspath(os.path.dirname(__file__))
    headPath = '/head.py'
    sourcePath = '/../../rpcapi/src/main/java/qc/qos/rpcapi/qpx1701/QOSServerApi.java'
    targetPath = '/../../pythonbind/target/pythonapi.py'

    codes = []


def getSource():

    with open(g.thisPath+g.sourcePath, encoding='utf8') as fid:
        source = fid.read()
    g.print(source[:100])
    return source


def writeTarget(code):

    with open(g.thisPath+g.headPath, encoding='utf8') as fid:
        head = fid.read()
    with open(g.thisPath+g.targetPath, 'w', encoding='utf8') as fid:
        # fid.write(code)
        print('# This file is generated by converter.py, don\'t change, change the source code instead', file=fid)
        print(head, file=fid)
        print(code, file=fid)
        # pprint.pprint(code, stream=fid)


def removeComment(code):
    g.print(code[300:500])
    # block comment
    code = re.sub(r'/\*(\*(?!\/)|[^\*])*\*/', ' ', code)
    g.print(code[300:500])
    g.print(code[-200:])
    # line comment
    code = re.sub(r'//[^\r\n]*(?=\r|\n)', ' ', code)
    g.print(code[-200:])
    return code


def matchFunction(code):
    result = []
    for m in re.finditer(r'public (?:void )(\w+)\(([^\)]*)\)', code):
        args = [s.strip() for s in m.group(2).split(',') if s.strip()]
        result.append([m.group(1), args])
    g.pprint(result[:5])
    return result


def generateAPI(code):
    tpl = '''
def {name}(*args):
    patternsList = [{patternsList}]
    for patterns in patternsList:
        if matchArgument(patterns, args):
            args = convertArgument(patterns, args)
            g.Instance.{name}(*args)
            return
    raise TypeError('no input pattern match in {name}')
    '''
    p={}
    for k,v in code:
        if k in p:
            p[k].append(',\n\n        '+json.dumps(v))
        else:
            p[k]=['\n        '+json.dumps(v)]
    result=[]
    for k,v in p.items():
        part = tpl.format(name=k,patternsList=''.join(v))
        result.append(part)
    g.pprint(result[:2])
    return ''.join(result)


if __name__ == "__main__":
    g.codes.append(getSource())
    g.codes.append(removeComment(g.codes[-1]))
    g.codes.append(matchFunction(g.codes[-1]))
    g.codes.append(generateAPI(g.codes[-1]))
    writeTarget(g.codes[-1])
